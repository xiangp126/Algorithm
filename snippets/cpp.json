{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"for": {
		"prefix": "for",
		"body": [
			"for (int ${1:i} = ${2:0}; ${1:i} < ${3:length}; ++${1:i}) {",
			"	$0",
			"}"
		],
		"description": "Code snippet for 'for' loop"
	},
	"forr": {
		"prefix": "forr",
		"body": [
			"for (int ${1:i} = ${2:length} - 1; ${1:i} >= ${3:0}; --${1:i}) {",
			"	$0",
			"}"
		],
		"description": "Code snippet for reverse 'for' loop"
	},
	"foreach": {
		"prefix": "foreach",
		"body": [
			"for(auto ${1:val} : ${2:collection_to_loop}) {",
			"	$0",
			"}"
		],
		"description": "Code snippet for range-based for loop (c++11) statement"
	},
	"do": {
		"prefix": "do",
		"body": [
			"do {",
			"	$0",
			"} while();"
		],
		"description": "Code snippet for do...while loop"
	},
	"while": {
		"prefix": "while",
		"body": [
			"while ($0) {",
			"	",
			"}"
		],
		"description": "Code snippet for while loop"
	},
	"if": {
		"prefix": "if",
		"body": [
			"if ($0) {",
			"	",
			"}"
		],
		"description": "Code snippet for if statement"
	},
	"else": {
		"prefix": "else",
		"body": [
			"else {",
			"	$0",
			"}"
		],
		"description": "Code snippet for else statement"
	},
	"else if": {
		"prefix": "else if",
		"body": [
			"else if ($0) {",
			"	",
			"}"
		],
		"description": "Code snippet for else-if statement"
	},
	"enum": {
		"prefix": "enum",
		"body": [
			"enum ${MyEnum} {",
			"	$1",
			"};"
		],
		"description": "Code snippet for enum"
	},
	"enum class": {
		"prefix": "enum class",
		"body": [
			"enum class ${MyClass} { };"
		],
		"description": "Code snippet for enum class (c++11)"
	},
	"class": {
		"prefix": "class",
		"body": [
			"class ${MyClass} {",
			"public:",
			"	${MyClass}();",
			"	${MyClass}(${MyClass} &&) = default;",
			"	${MyClass}(const ${MyClass} &) = default;",
			"	${MyClass} &operator=(${MyClass} &&) = default;",
			"	${MyClass} &operator=(const ${MyClass} &) = default;",
			"	~${MyClass}();",
			"",
			"	${MyClass}::${MyClass}() {",
			"		$0",
			"	}",
			"",
			"	${MyClass}::~${MyClass}() {",
			"		",
			"	}"
			"};"
		],
		"description": "Code snippet for class"
	},
	"interface": {
		"prefix": "interface",
		"body": [
			"__interface I${Interface} {",
			"	$1",
			"};"
		],
		"description": "Code snippet for interface (Visual C++)"
	},
	"namespace": {
		"prefix": "namespace",
		"body": [
			"namespace ${MyNamespace} {",
			"	$1",
			"}"
		],
		"description": "Code snippet for namespace"
	},
	"#ifdef": {
		"prefix": "#ifdef",
		"body": [
			"#ifdef ${DEBUG}",
			"$1",
			"#endif // ${DEBUG}"
		],
		"description": "Code snippet for #ifdef"
	},
	"#ifndef": {
		"prefix": "#ifndef",
		"body": [
			"#ifndef ${1:1}",
			"$0",
			"#endif // !$1"
		],
		"description": "Code snippet for #ifndef"
	},
	"#if": {
		"prefix": "#if",
		"body": [
			"#ifdef ${1:0}",
			"$2",
			"#endif // $1"
		],
		"description": "Code snippet for #if"
	},
	"struct": {
		"prefix": "struct",
		"body": [
			"struct ${MyStruct} {",
			"	$1",
			"};"
		],
		"description": "Code snippet for struct"
	},
	"switch": {
		"prefix": "switch",
		"body": [
			"switch (${switch_on}) {",
			"default:",
			"	break;$1",
			"}"
		],
		"description": "Code snippet for switch statement"
	},
	"try": {
		"prefix": "try",
		"body": [
			"try {",
			"	",
			"}",
			"catch (const std::exception&) {",
			"	$1",
			"}"
		],
		"description": "Code snippet for try catch"
	},
	"union": {
		"prefix": "union",
		"body": [
			"union ${MyUnion} {",
			"	$1",
			"};"
		],
		"description": "Code snippet for union"
	},
	"cout": {
		"prefix": "cout",
		"body": [
			"cout << \"${1:/* message */}\" << endl;"
		],
		"description": "Code snippet for printing to std::cout, provided the header is set"
	},
	"#inc": {
		"prefix": "#inc<",
		"body": [
			"#include <$1>"
		],
		"description": "Code snippet for #include \" \""
	},
	"#incc": {
		"prefix": "#inc",
		"body": [
			"#include \"$1\""
		],
		"description": "Code snippet for #include \" \""
	},
	"#def": {
		"prefix": "#def",
		"body": [
			"#define \"$1\" \"$2\" "
		],
		"description": "Code snippet for #define \" \""
	},
	"main": {
		"prefix": "main",
		"body": [
			"int main(int argc, const char** argv) {",
			"	${1}",
			"    return 0;",
			"}"
		],
		"description": "Code snippet for main function"
	}
}

